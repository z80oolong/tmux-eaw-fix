diff --git a/options-table.c b/options-table.c
index 5c374da..faa68e6 100644
--- a/options-table.c
+++ b/options-table.c
@@ -129,14 +129,6 @@ const struct options_table_entry options_table[] = {
 	  .separator = ","
 	},
 
-#ifndef NO_USE_UTF8CJK
-	{ .name = "utf8-cjk",
-	  .type = OPTIONS_TABLE_FLAG,
-	  .scope = OPTIONS_TABLE_SERVER,
-	  .default_num = 1
-	},
-#endif
-
 	{ .name = "assume-paste-time",
 	  .type = OPTIONS_TABLE_NUMBER,
 	  .scope = OPTIONS_TABLE_SESSION,
@@ -306,15 +298,6 @@ const struct options_table_entry options_table[] = {
 	  .default_num = 0
 	},
 
-#ifndef NO_USE_PANE_BORDER_ASCII
-	/* This patch is written by waltrax on https://gist.githubusercontent.com/waltarix/1399751/raw/6c8f54ec8e55823fb99b644a8a5603847cb60882/tmux-pane-border-ascii.patch */
-	{ .name = "pane-border-ascii",
-	  .type = OPTIONS_TABLE_FLAG,
-	  .scope = OPTIONS_TABLE_SESSION,
-	  .default_num = 0
-	},
-#endif
-
 	{ .name = "prefix",
 	  .type = OPTIONS_TABLE_KEY,
 	  .scope = OPTIONS_TABLE_SESSION,
@@ -919,5 +902,26 @@ const struct options_table_entry options_table[] = {
 	  .default_num = 1
 	},
 
+#ifndef NO_USE_UTF8CJK
+	/* UTF8 East asian Ambiguous Width charactor options. */
+	{ .name = "utf8-cjk",
+	  .type = OPTIONS_TABLE_FLAG,
+	  .scope = OPTIONS_TABLE_SERVER,
+	  .default_num = 1
+	},
+
+	{ .name = "pane-border-acs",
+	  .type = OPTIONS_TABLE_FLAG,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 0
+	},
+
+	{ .name = "pane-border-ascii",
+	  .type = OPTIONS_TABLE_FLAG,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 0
+	},
+#endif
+
 	{ .name = NULL }
 };
diff --git a/tmux.c b/tmux.c
index bf5f06e..018cdca 100644
--- a/tmux.c
+++ b/tmux.c
@@ -339,10 +339,8 @@ main(int argc, char **argv)
 #ifndef NO_USE_UTF8CJK
 	if (!strncmp(ctype, "ja", 2) || !strncmp(ctype, "ko", 2) || !strncmp(ctype, "zh", 2)) {
 		options_set_number(global_options, "utf8-cjk", 1);
-		options_set_number(global_s_options, "pane-border-ascii", 1);
 	} else {
 		options_set_number(global_options, "utf8-cjk", 0);
-		options_set_number(global_s_options, "pane-border-ascii", 0);
 	}
 #endif
 	/*
diff --git a/tmux.h b/tmux.h
index 636a16b..40bc99f 100644
--- a/tmux.h
+++ b/tmux.h
@@ -60,13 +60,6 @@ struct tmuxproc;
 #define TMUX_CONF "/etc/tmux.conf"
 #endif
 
-/* If "pane-border-ascii" is not used, "utf8-cjk" is not used too. */
-#ifdef NO_USE_PANE_BORDER_ASCII
-#ifndef NO_USE_UTF8CJK
-#define NO_USE_UTF8CJK
-#endif
-#endif
-
 /*
  * Minimum layout cell size, NOT including separator line. The scroll region
  * cannot be one line in height so this must be at least two.
diff --git a/tty-acs.c b/tty-acs.c
index f699e04..7413042 100644
--- a/tty-acs.c
+++ b/tty-acs.c
@@ -22,6 +22,83 @@
 
 #include "tmux.h"
 
+#ifndef NO_USE_UTF8CJK
+#include <string.h>
+
+static char tty_acs_table[UCHAR_MAX][4] = {
+	['+'] = "\342\206\222",	/* arrow pointing right */
+	[','] = "\342\206\220",	/* arrow pointing left */
+	['-'] = "\342\206\221",	/* arrow pointing up */
+	['.'] = "\342\206\223",	/* arrow pointing down */
+	['0'] = "\342\226\256",	/* solid square block */
+	['`'] = "\342\227\206",	/* diamond */
+	['a'] = "\342\226\222",	/* checker board (stipple) */
+	['b'] = "\342\220\211",
+	['c'] = "\342\220\214",
+	['d'] = "\342\220\215",
+	['e'] = "\342\220\212",
+	['f'] = "\302\260",	/* degree symbol */
+	['g'] = "\302\261",	/* plus/minus */
+	['h'] = "\342\220\244",	/* board of squares	ACS_BOARD	*/
+	['i'] = "\342\220\213",
+	['j'] = "\342\224\230",	/* lower right corner */
+	['k'] = "\342\224\220",	/* upper right corner */
+	['l'] = "\342\224\214",	/* upper left corner */
+	['m'] = "\342\224\224",	/* lower left corner */
+	['n'] = "\342\224\274",	/* large plus or crossover */
+	['o'] = "\342\216\272",	/* scan line 1 */
+	['p'] = "\342\216\273",	/* scan line 3 */
+	['q'] = "\342\224\200",	/* horizontal line */
+	['r'] = "\342\216\274",	/* scan line 7 */
+	['s'] = "\342\216\275",	/* scan line 9 */
+	['t'] = "\342\224\234",	/* tee pointing right */
+	['u'] = "\342\224\244",	/* tee pointing left */
+	['v'] = "\342\224\264",	/* tee pointing up */
+	['w'] = "\342\224\254",	/* tee pointing down */
+	['x'] = "\342\224\202",	/* vertical line */
+	['y'] = "\342\211\244",	/* less-than-or-equal-to */
+	['z'] = "\342\211\245",	/* greater-than-or-equal-to */
+	['{'] = "\317\200",   	/* greek pi */
+	['|'] = "\342\211\240",	/* not-equal */
+	['}'] = "\302\243",	/* UK pound sign */
+	['~'] = "\302\267"	/* bullet */
+};
+
+static char tty_acs_ascii_table[UCHAR_MAX][2] = {
+	['}'] = "f",	/* UK pound sign		ACS_STERLING	*/
+	['.'] = "v",	/* arrow pointing down		ACS_DARROW	*/
+	[','] = "<",	/* arrow pointing left		ACS_LARROW	*/
+	['+'] = ">",	/* arrow pointing right		ACS_RARROW	*/
+	['-'] = "^",	/* arrow pointing up		ACS_UARROW	*/
+	['h'] = "#",	/* board of squares		ACS_BOARD	*/
+	['~'] = "o",	/* bullet			ACS_BULLET	*/
+	['a'] = ":",	/* checker board (stipple)	ACS_CKBOARD	*/
+	['f'] = "\\",	/* degree symbol		ACS_DEGREE	*/
+	['`'] = "+",	/* diamond			ACS_DIAMOND	*/
+	['z'] = ">",	/* greater-than-or-equal-to	ACS_GEQUAL	*/
+	['{'] = "*",	/* greek pi			ACS_PI		*/
+	['q'] = "-",	/* horizontal line		ACS_HLINE	*/
+	['i'] = "#",	/* lantern symbol		ACS_LANTERN	*/
+	['n'] = "+",	/* large plus or crossover	ACS_PLUS	*/
+	['y'] = "<",	/* less-than-or-equal-to	ACS_LEQUAL	*/
+	['m'] = "+",	/* lower left corner		ACS_LLCORNER	*/
+	['j'] = "+",	/* lower right corner		ACS_LRCORNER	*/
+	['|'] = "!",	/* not-equal			ACS_NEQUAL	*/
+	['g'] = "#",	/* plus/minus			ACS_PLMINUS	*/
+	['o'] = "~",	/* scan line 1			ACS_S1		*/
+	['p'] = "-",	/* scan line 3			ACS_S3		*/
+	['r'] = "-",	/* scan line 7			ACS_S7		*/
+	['s'] = "_",	/* scan line 9			ACS_S9		*/
+	['0'] = "#",	/* solid square block		ACS_BLOCK	*/
+	['w'] = "+",	/* tee pointing down		ACS_TTEE	*/
+	['u'] = "+",	/* tee pointing left		ACS_RTEE	*/
+	['t'] = "+",	/* tee pointing right		ACS_LTEE	*/
+	['v'] = "+",	/* tee pointing up		ACS_BTEE	*/
+	['l'] = "+",	/* upper left corner		ACS_ULCORNER	*/
+	['k'] = "+",	/* upper right corner		ACS_URCORNER	*/
+	['x'] = "|",	/* vertical line		ACS_VLINE	*/
+};
+#else
 static int	tty_acs_cmp(const void *, const void *);
 
 /* Table mapping ACS entries to UTF-8. */
@@ -64,48 +141,6 @@ static const struct tty_acs_entry tty_acs_table[] = {
 	{ '~', "\302\267" }		/* bullet */
 };
 
-#ifndef NO_USE_PANE_BORDER_ASCII
-/* This patch is written by waltrax on https://gist.githubusercontent.com/waltarix/1399751/raw/6c8f54ec8e55823fb99b644a8a5603847cb60882/tmux-pane-border-ascii.patch */
-const struct tty_acs_entry tty_acs_table_putty[] = {
-	{ '+', "\342\206\222" },
-	{ ',', "\342\206\220" },
-	{ '-', "\342\206\221" },
-	{ '.', "\342\206\223" },
-	{ '0', "\342\226\256" },
-	{ '`', "\342\227\206" },
-	{ 'a', "\342\226\222" },
-	{ 'b', "\342\220\211" },
-	{ 'c', "\342\220\214" },
-	{ 'd', "\342\220\215" },
-	{ 'e', "\342\220\212" },
-	{ 'f', "\302\260" },
-	{ 'g', "\302\261" },
-	{ 'h', "\342\226\222" },
-	{ 'i', "\342\230\203" },
-	{ 'j', "+" },
-	{ 'k', "+" },
-	{ 'l', "+" },
-	{ 'm', "+" },
-	{ 'n', "+" },
-	{ 'o', "\342\216\272" },
-	{ 'p', "\342\216\273" },
-	{ 'q', "-" },
-	{ 'r', "\342\216\274" },
-	{ 's', "\342\216\275" },
-	{ 't', "+" },
-	{ 'u', "+" },
-	{ 'v', "+" },
-	{ 'w', "+" },
-	{ 'x', "|" },
-	{ 'y', "\342\211\244" },
-	{ 'z', "\342\211\245" },
-	{ '{', "\317\200" },
-	{ '|', "\342\211\240" },
-	{ '}', "\302\243" },
-	{ '~', "*" }
-};
-#endif
-
 static int
 tty_acs_cmp(const void *key, const void *value)
 {
@@ -115,11 +150,106 @@ tty_acs_cmp(const void *key, const void *value)
 	ch = *(u_char *) key;
 	return (ch - entry->key);
 }
+#endif  /* NO_USE_UTF8CJK */
+
+#ifndef NO_USE_UTF8CJK
+static int
+get_utf8_width(const char *s)
+{
+	const char		*p = s;
+	struct utf8_data	 ud;
+	enum utf8_state		 more;
+
+	for (more = utf8_open(&ud, *p++); more == UTF8_MORE; more = utf8_append(&ud, *p++))
+		;
+	if (more != UTF8_DONE)
+		fatalx("INTERNAL ERROR: In get_utf8_width, utf8_open or utf8_append return error %d", more);
+	log_debug("%s width is %d", s, ud.width);
+	return ud.width;
+}
+
+enum acs_type {
+	ACST_UTF8,
+	ACST_ACS,
+	ACST_ASCII,
+};
+
+static enum acs_type
+tty_acs_type(struct tty *tty)
+{
+	if (tty == NULL)
+		return (ACST_ASCII);
+
+	/*
+	 * If the U8 flag is present, it marks whether a terminal supports
+	 * UTF-8 and ACS together.
+	 *
+	 * If it is present and zero, we force ACS - this gives users a way to
+	 * turn off UTF-8 line drawing.
+	 *
+	 * If it is nonzero, we can fall through to the default and use UTF-8
+	 * line drawing on UTF-8 terminals.
+	 */
+
+	struct environ_entry	*envent;
+	envent = environ_find(tty->client->environ, "TMUX_ACS");
+	if (envent != NULL) {
+		if (strcasestr(envent->value, "utf-8") != NULL ||
+		    strcasestr(envent->value, "utf8") != NULL)
+			return (ACST_UTF8);
+		else if (strcasestr(envent->value, "acs") != NULL)
+			return (ACST_ACS);
+		else
+			return (ACST_ASCII);
+	}
+
+	if (options_get_number(global_s_options, "pane-border-acs"))
+		return (ACST_ACS);
+	if (options_get_number(global_s_options, "pane-border-ascii"))
+		return (ACST_ASCII);
+
+	if ((tty->flags & TTY_UTF8) &&
+	    (!tty_term_has(tty->term, TTYC_U8) ||
+	     tty_term_number(tty->term, TTYC_U8) != 0)) {
+		static int hline_width = 0;
+		const char *hline = "\342\224\200";
+		if (hline_width == 0) {
+			hline_width = get_utf8_width(hline);
+			log_debug("hline_width=%d", hline_width);
+		}
+		if (hline_width == 1)
+			return (ACST_UTF8);
+	}
+
+	if (tty_term_has(tty->term, TTYC_ACSC))
+		return (ACST_ACS);
 
+	return (ACST_ASCII);
+}
+#endif /* NO_USE_UTF8CJK */
+ 
 /* Retrieve ACS to output as a string. */
 const char *
 tty_acs_get(struct tty *tty, u_char ch)
 {
+#ifndef NO_USE_UTF8CJK
+	switch (tty_acs_type(tty)) {
+	case ACST_UTF8:
+		if (tty_acs_table[ch][0] != '\0')
+			return (&tty_acs_table[ch][0]);
+		break;
+	case ACST_ACS:
+		if (tty->term->acs[ch][0] != '\0')
+			return (&tty->term->acs[ch][0]);
+		break;
+	case ACST_ASCII:
+		break;
+	}
+
+	if (tty_acs_ascii_table[ch][0] != '\0')
+		return (&tty_acs_ascii_table[ch][0]);
+	return (NULL);
+#else
 	struct tty_acs_entry *entry;
 
 	/* If not a UTF-8 terminal, use the ACS set. */
@@ -130,23 +260,11 @@ tty_acs_get(struct tty *tty, u_char ch)
 	}
 
 	/* Otherwise look up the UTF-8 translation. */
-#ifdef NO_USE_PANE_BORDER_ASCII
 	entry = bsearch(&ch,
 	    tty_acs_table, nitems(tty_acs_table), sizeof tty_acs_table[0],
 	    tty_acs_cmp);
-#else
-        struct tty_acs_entry *entries;
-			
-#ifdef NO_USE_UTF8_CJK
-        entries = options_get_number(global_s_options, "pane-border-ascii") ? tty_acs_table_putty : tty_acs_table;
-#else
-        entries = (options_get_number(global_options, "utf8-cjk") || options_get_number(global_s_options, "pane-border-ascii")) \
-						                  ? tty_acs_table_putty : tty_acs_table;
-#endif
-
-	entry = bsearch(&ch, (const void *)entries, nitems(tty_acs_table), sizeof tty_acs_table[0], tty_acs_cmp);
-#endif						
 	if (entry == NULL)
 		return (NULL);
 	return (entry->string);
+#endif /* NO_USE_UTF8CJK */
 }
diff --git a/tty-term.c b/tty-term.c
index b8a25de..bf3f215 100644
--- a/tty-term.c
+++ b/tty-term.c
@@ -505,6 +505,15 @@ tty_term_find(char *name, int fd, char **cause)
 	if (!tty_term_flag(term, TTYC_XENL))
 		term->flags |= TERM_EARLYWRAP;
 
+#ifndef NO_USE_UTF8CJK
+	/* Generate ACS table. */
+	memset(term->acs, 0, sizeof term->acs);
+	if (tty_term_has(term, TTYC_ACSC)) {
+		acs = tty_term_string(term, TTYC_ACSC);
+		for (; acs[0] != '\0' && acs[1] != '\0'; acs += 2)
+			term->acs[(u_char) acs[0]][0] = acs[1];
+	}
+#else
 	/* Generate ACS table. If none is present, use nearest ASCII. */
 	memset(term->acs, 0, sizeof term->acs);
 	if (tty_term_has(term, TTYC_ACSC))
@@ -513,6 +522,7 @@ tty_term_find(char *name, int fd, char **cause)
 		acs = "a#j+k+l+m+n+o-p-q-r-s-t+u+v+w+x|y<z>~.";
 	for (; acs[0] != '\0' && acs[1] != '\0'; acs += 2)
 		term->acs[(u_char) acs[0]][0] = acs[1];
+#endif
 
 	/* On terminals with xterm titles (XT), fill in tsl and fsl. */
 	if (tty_term_flag(term, TTYC_XT) &&
